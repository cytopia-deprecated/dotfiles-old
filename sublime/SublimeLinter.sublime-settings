{

	/*
		Sets the mode in which SublimeLinter runs:

		true - Linting occurs in the background as you type (the default).
		false - Linting only occurs when you initiate it.
		"load-save" - Linting occurs only when a file is loaded and saved.
		"save-only" - Linting occurs only when a file is saved.
	*/
	"sublimelinter": true,


	/*
		Maps language names **as listed at the beginning of the README** (but all lowercase)
		to executables for non-built in linters. If the executable is not in the default system path,
		or on posix systems is not in /usr/local/bin or ~/bin, then you must specify
		the full path to the executable. Note that paths in Windows must use double
		backslashes, for example "C:\\Program Files (x86)\\nodejs\\node.exe".

		Please note that the map _keys_ do not always match the name of the
		executable, but rather the language syntax for the executable to lint.

		This is the effective default map; your mappings may override these.
	*/
	"sublimelinter_executable_map":
	{
			"perl": "/usr/bin/perl",
			"php": "/usr/bin/php",
			"ruby": "/usr/bin/ruby",
			"javascript": "/usr/sbin/node"
	},

	/*
		Maps syntax names to linters. This allows variations on a syntax
		(for example "Python (Django)") to be linted. The key is
		the name of the syntax **as it appears in the syntax list
		at the bottom right of the window**, and the value
		is the linter name **as listed in the README** (all lowercase)
		that the syntax maps to.
	*/
	"sublimelinter_syntax_map":
	{
		"Python Django": "python",
		"Ruby on Rails": "ruby",
		"C++": "c",
		"PHP" : "php"
	},

	/*
		The minimum delay in seconds (fractional seconds are okay) before
		a linter is run when the "sublimelinter" setting is true. This allows
		you to have background linting active, but defer the actual linting
		until you are idle. When this value is greater than the built in linting delay,
		errors are erased when the file is modified, since the assumption is
		you don't want to see errors while you type.
	*/
	"sublimelinter_delay": 2,

	/*
		Selects the way the lines with errors or warnings are marked; "outline" draws
		outline boxes around the lines, "fill" fills the lines with the outline color,
		and "none" (default) disables all outline styles.
	*/
	"sublimelinter_mark_style": "outline",

	/*
		If true, lines with errors or warnings will be filled in with the
		outline color.

		This setting is DEPRECATED and will be ignored in future
		versions. Use "sublimelinter_mark_style" instead. For backwards
		compatibility reasons, this setting overrides "sublimelinter_mark_style"
		if that one is set to "outline", but has no effect if it's set to "none".
	*/
	"sublimelinter_fill_outlines": false,

	// If true, lines with errors or warnings will have a gutter mark.
	"sublimelinter_gutter_marks": true,

	/*
		Choose the theme for gutter marks; available built-in options are:
		"alpha", "bright", "dark", "hard" and "simple"

		Anything else will be treated as a path to a set of images.
		For instance, setting the value to "../User/my-awesome-theme"
		would cause SublimeLinter to look for the images:
		"../User/my-awesome-theme-illegal.png",
		"../User/my-awesome-theme-violation.png",
		"../User/my-awesome-theme-warning.png"
		These images should all be approximately 32x32px.
	*/
	"sublimelinter_gutter_marks_theme": "simple",

	// If true, the find next/previous error commands will wrap.
	"sublimelinter_wrap_find": true,

	// If true, when the file is saved any errors will appear in a popup list
	"sublimelinter_popup_errors_on_save": true,


	// Set to true to highlight annotations
	"sublimelinter_notes": true,

	// The set of annotation phrases to highlight
	"annotations": ["TODO", "README", "FIXME"],

	// JavaScript linter: "gjslint" to use the closure javascript linter (if available),
	// or either "jshint" or "jslint" to use a built in linter.
	"javascript_linter": "jshint",

	// jshint: options for linting JavaScript. See http://www.jshint.com/docs/#options for more info.
	// By deault, eval is allowed.
	"jshint_options":
	{
		// enforcing options
		"bitwise": true,
		"camelcase": false,
		"curly": true,
		"eqeqeq": true,
		"es3": false,
		"forin": true,
		"immed": true,
		"indent": 4,
		"latedef": true,
		"newcap": true,
		"noarg": true,
		"noempty": true,
		"nonew": true,
		"plusplus": false,
		"quotmark": true,
		"undef": true,
		"unused": true,
		"strict": false,
		"trailing": true,
		"maxparams": false,
		"maxdepth": false,
		"maxstatements": false,
		"maxcomplexity": false,
		"maxlen": false,

		// relaxing options
		"asi": true,
		"boss": false,
		"debug": false,
		"eqnull": false,
		"esnext": false,
		"evil": false,
		"expr": false,
		"funcscope": false,
		"globalstrict": false,
		"iterator": false,
		"lastsemic": false,
		"laxbreak": false,
		"laxcomma": false,
		"loopfunc": false,
		"moz": false,
		"multistr": true,
		"proto": false,
		"scripturl": false,
		"smarttabs": true,
		"shadow": false,
		"sub": false,
		"supernew": false,
		"validthis": false,

		// environments
		"browser": true,
		"couch": false,
		"devel": true,
		"dojo": false,
		"jquery": true,
		"mootools": false,
		"node": false,
		"nonstandard": true,
		"phantom": false,
		"prototypejs": false,
		"rhino": false,
		"worker": false,
		"wsh": true,
		"yui": false
	},

	// CSSLint options:
	// Each rule can have three values: error|warning|true|false
	// false => rule is disabled.
	// true => alias to 'error'
	// All rules are enabled by default.
	// Currently the only difference between warnings and errors is in the prefix of the message in the Sublime status bar.
	"csslint_options":
	{
		// possible errors
		"box-model": false,
		"display-property-grouping": true,
		"duplicate-properties": true,
		"empty-rules": true,
		"known-properties": true,
		"non-link-hover": false,

		// compatibility
		"adjoining-classes": false,
		"box-sizing": true,
		"compatible-vendor-prefixes": true,
		"gradients": true,
		"text-indent": true,
		"vendor-prefix": true,
		"fallback-colors": true,
		"star-property-hack": false,
		"underscore-property-hack": false,
		"bulletproof-font-face": true,

		// performance
		"font-faces": false,
		"import": false,
		"regex-selectors": false,
		"universal-selector": false,
		"unqualified-attributes": true,
		"zero-units": true,
		"overqualified-elements": true,
		"shorthand": true,
		"duplicate-background-images": true,

		// maintainability & duplication
		"floats": true,
		"font-sizes": true,
		"ids": true,
		"important": true,

		// accessibility
		"outline-none": true,

		// oocss
		"qualified-headings": true,
		"unique-headings": true
	},
}

